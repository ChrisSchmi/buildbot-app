# -*- python -*-
# ex: set filetype=python:

import os
import re
import json
import uuid
from pathlib import Path
from buildbot.plugins import *
from buildbot.process.properties import renderer
from buildbot.plugins import util, steps, schedulers, reporters, secrets
from twisted.internet import defer
from buildbot.process.properties import Interpolate
from buildbot.reporters.generators.build import BuildStartEndStatusGenerator
from buildbot.reporters.generators.build import BuildStatusGenerator
from buildbot.reporters.message import MessageFormatterRenderable
from buildbot.reporters.github import GitHubCommentPush
from buildbot.www import auth, authz

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# github_app_api_url = os.environ.get('GITHUB_APP_API_URL', 'https://3098-2001-9e8-dbdc-5a00-8a9b-c83-1817-5c20.ngrok-free.app/buildbot-hook')
github_app_api_url = 'https://d701-2001-9e8-dbf1-af00-1953-c994-ecce-7c97.ngrok-free.app/buildbot-hook'
github_app_status_api_url = 'https://d701-2001-9e8-dbf1-af00-1953-c994-ecce-7c97.ngrok-free.app/buildbot-status-hook'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker('worker1', 'W0rk3rP@55w0rd', properties={'os':'linux'}),
    worker.Worker('worker2', 'W0rk3rP@55w0rd', properties={}),
    worker.Worker('worker3', 'W0rk3rP@55w0rd', properties={}),
]

all_workers = ['worker1', 'worker2', 'worker3']

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {
    'pb': {
        'port': int(os.environ.get('BUILDBOT_MASTER_PORT', 9989))
    }
}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
# c['change_source'].append(changes.GitPoller(
#         'https://github.com/buildbot/hello-world.git',
#         workdir='gitpoller-workdir', branch='master',
#         pollInterval=300))

####### SCHEDULERS

# tryscheduler1 (is a try scheduler)
#  runs delegationBuilder
#   triggers simpleBuilder1
#   or triggers simpleBuilder2

# delegationBuilder
#  runs simpleBuilder 

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#                             name="all",
#                             change_filter=util.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["runtests"]))
# c['schedulers'].append(schedulers.ForceScheduler(
#                             name="force",
#                             builderNames=["runtests"]))

# This scheduler allows developers to use the buildbot try command to trigger
# builds of code they have not yet committed. We only have one user
# ("alice-try") because the only client that needs the credentials is the Github
# App. That listens to "/buildbot" comments from PR commenters and eventually
# makes a "buildbot try" call itself. The Github App sends us properties that we
# need to process in order to know who triggered the build. That person and the
# original author(s) of the PR will be added as the "owner" property. This is
# important for notifying them personally about failing builds (See
# https://docs.buildbot.net/current/manual/concepts.html#doing-things-with-users).

# https://docs.buildbot.net/current/manual/configuration/schedulers.html#try-schedulers
# https://docs.buildbot.net/current/manual/configuration/schedulers.html#configuring-schedulers
c['schedulers'].append(schedulers.Try_Userpass(
    name="tryscheduler1",
    # This is the set of builders which this scheduler should trigger.
    # If you list more than one here, you will have more than one builds.
    # See http://docs.buildbot.net/current/manual/configuration/global.html#prioritizing-builders
    
    # WARNING(kwk): With "buildbot-try --get-builder-names" this errors in: builtins.TypeError: 'Unpersistable' object is not iterable
    builderNames=['delegationBuilder'],
    port=int(os.environ.get('BUILDBOT_MASTER_TRY_PORT', 8031)),
    userpass=[
        ("alice-try","TryP@55w0rd")
    ],
    properties={
        # See https://docs.buildbot.net/current/manual/configuration/schedulers.html#scheduler-attr-codebases
        #'owner': ['email-address-of-the-user-who-authored-the-pr-and-who-triggered-the-build@example.com']
    }
))

# This functions is crucial for handling which builders will be run when a PR
# receives a "/buildbot" comment. Based on the properties we received, we can
# decide here which builder to trigger.
@util.renderer
@defer.inlineCallbacks
def builderNames(props):
    return (row for row in 'simpleBuilder') 
    # TODO(kwk): Implement logic here to switch on provided arguments
    # # If "buildername_pattern" is defined with "buildbot sendchange",
    # # check if the builder name matches it.
    # pattern = props.getProperty('buildername_pattern')

    # # If "builder_tags" is defined with "buildbot sendchange",
    # # only schedule builders that have the specified tags.
    # tags = props.getProperty('builder_tags')

    # builders = []

    # for b in (yield props.master.data.get(('builders',))):
    #     if pattern and not fnmatch.fnmatchcase(b['name'], pattern):
    #         continue
    #     if tags and not set(tags.split()).issubset(set(b['tags'])):
    #         continue
    #     builders.append(b['name'])

    # return builders

# https://docs.buildbot.net/current/manual/configuration/schedulers.html#triggerable-scheduler
c['schedulers'].append(schedulers.Triggerable(
    name="triggerableScheduler1",
    builderNames=['simpleBuilder'],
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# See http://docs.buildbot.net/current/manual/configuration/builders.html#builder-configuration
c['builders'] = []

simpleFactory = util.BuildFactory()
# https://docs.buildbot.net/latest/manual/configuration/steps/shell_command.html
# https://docs.buildbot.net/latest/manual/configuration/steps/common.html
simpleFactory.addStep(steps.ShellCommand(
    name="As simple shell command",
    description="running",
    command=["echo", "Hello from the simpleFactory"]))
simpleFactory.addStep(steps.ShellCommand(
    name="A command that shows a property",
    description="running",
    command=["echo", '"PR Number:"', util.Property('github_pull_request_number', default='NOTSET')]))
simpleFactory.addStep(steps.ShellCommand(
    name="A command that fails by design",
    description="listing",
    command=["ls", util.Interpolate(str(uuid.uuid4()))]
)
)
# TODO(kwk): Maybe we can avoid having this manually added build step and
# instead listen to events in buildbot and to the HTTP stuff there. This would
# prevent having to duplicate the HTTP calls in every factory. I'm not saying
# this is the best approach but it is one that works out of the box and is good
# for a walking skeleton demo.
# simpleFactory.addStep(
#     steps.POST(
#         alwaysRun=True,
#         name = "Inform buildbot-app that the build is done",
#         description="reporting",
#         descriptionDone="report",
#         # TODO(kwk): For now this shall just work, but add authorization token mechanism here.
#         headers = {"Content-Type":  "application/json"},
#         url = github_app_api_url,
#         # Hide the Authorization token from the request log
#         hide_request_headers = ['Authorization'],
#         data = util.Interpolate("""{
#             "buildbot_build_status":           "success",
#             "buildbot_build_html_url":         "%(kw:buildbot_build_html_url)s",
#             "buildbot_worker_name":            "%(prop:workername)s",
#             "github_check_run_id":              %(prop:github_check_run_id)s,
#             "github_app_installation_id":       %(prop:github_app_installation_id)s,
#             "github_pull_request_number":       %(prop:github_pull_request_number)s,
#             "github_pull_request_repo_name":   "%(prop:github_pull_request_repo_name)s",
#             "github_pull_request_repo_owner":  "%(prop:github_pull_request_repo_owner)s",
#             "github_pull_request_base_ref":    "%(prop:github_pull_request_base_ref)s",
#             "github_pull_request_base_sha":    "%(prop:github_pull_request_base_sha)s",
#             "github_pull_request_head_ref":    "%(prop:github_pull_request_head_ref)s",
#             "github_pull_request_head_sha":    "%(prop:github_pull_request_head_sha)s"
#         }
#         """,
#         buildbot_build_html_url=util.URLForBuild,
#         )
#     )
# )  

# simpleFactory.addStep(steps.Git(
#         # TODO(kwk): How to fetch 
#         repourl='https://github.com/kwk/messwithme.git',
#         mode='incremental',
#         # Common parameters for all steps: http://docs.buildbot.net/latest/manual/configuration/steps/common.html
#         name='Checkout the source code',
#         # Common parameters for all source checkout steps: https://docs.buildbot.net/latest/manual/configuration/steps/source_common.html
#         # repository='kwk/llvm-ci',
#         ))

c['builders'].append(util.BuilderConfig(name="simpleBuilder", workernames=all_workers, factory=simpleFactory))

delegationFactory = util.BuildFactory()
# See https://docs.buildbot.net/current/manual/configuration/steps/trigger.html
# TODO(kwk): Use this property to help make builders mandatory or unimportant:
# unimportantSchedulerNames: When waitForFinish is True, all schedulers in this
# list will not cause the trigger step to fail. unimportantSchedulerNames must
# be a subset of schedulerNames. If waitForFinish is False,
# unimportantSchedulerNames will simply be ignored.

@renderer
def get_all_props(props):
    yield props.__dict__

delegationFactory.addStep(
    steps.Trigger(schedulerNames=['triggerableScheduler1'], waitForFinish=True, set_properties=
        get_all_props
        # {
        #     "github_app_installation_id":       util.Property("github_app_installation_id"),
        #     "github_check_run_id":              util.Property("github_check_run_id"),
        #     "github_pull_request_base_ref":     util.Property("github_pull_request_base_ref"),
        #     "github_pull_request_base_sha":     util.Property("github_pull_request_base_sha"),
        #     "github_pull_request_head_ref":     util.Property("github_pull_request_head_ref"),
        #     "github_pull_request_head_sha":     util.Property("github_pull_request_head_sha"),
        #     "github_pull_request_number":       util.Property("github_pull_request_number"),
        #     "github_pull_request_repo_name":    util.Property("github_pull_request_repo_name"),
        #     "github_pull_request_repo_owner":   util.Property("github_pull_request_repo_owner")
        # }
    )
)
c['builders'].append(util.BuilderConfig(name="delegationBuilder", workernames=all_workers, factory=delegationFactory))
# c['builders'].append(util.BuilderConfig(name="trybuilder2", workernames=['worker2'], factory=tryfactory))
# c['builders'].append(util.BuilderConfig(name="trybuilder3", workernames=['worker3'], factory=tryfactory))

# factory = util.BuildFactory()
# # check out the source
# factory.addStep(steps.Git(repourl='https://github.com/buildbot/hello-world.git', mode='incremental'))
# # run the tests (note that this will require that 'trial' is installed)
# factory.addStep(steps.ShellCommand(command=["trial", "hello"],
#                                    env={"PYTHONPATH": "."}))

# c['builders'] = []
# c['builders'].append(
#     util.BuilderConfig(name="runtests",
#       workernames=["example-worker"],
#       factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

# TODO(kwk): Evaluate if a service would be the best option for integrating the buildbot app
# https://docs.buildbot.net/latest/manual/configuration/services/index.html

c['services'] = []

# See https://docs.buildbot.net/latest/manual/configuration/reporters/http_status.html
from buildbot.plugins import reporters
sp = reporters.HttpStatusPush(
    serverUrl=github_app_status_api_url,
    debug=True,
)
c['services'].append(sp)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = os.environ.get('BUILDBOT_MASTER_TITLE', "Untitled")
c['titleURL'] = "https://github.com/kwk/messwithme/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

www_port = int(os.environ.get('BUILDBOT_WWW_PORT', 8010))
c['buildbotURL'] = os.environ.get('BUILDBOT_WWW_URL', "http://localhost:"+str(www_port)+"/")

# minimalistic config to activate new web UI
c['www'] = {
    'port': www_port,
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
        # 'badges': True,
    },
    'ui_default_config': {  
        'Waterfall.number_background_waterfall': True,
        'Waterfall.show_builders_without_builds': True,
        'Grid.fullChanges': True,
        'Grid.leftToRight': True,
        'Builders.show_workers_name': True,
    }
    # 'authz': util.Authz(
    #     stringsMatcher=util.fnmatchStrMatcher,  # simple matcher with '*' glob character
    #     # stringsMatcher = util.reStrMatcher,   # if you prefer regular expressions
    #     allowRules=[
    #         # admins can do anything,
    #         # defaultDeny=False: if user does not have the admin role, we continue parsing rules
    #         util.AnyEndpointMatcher(role="admins", defaultDeny=False),
            
    #         util.StopBuildEndpointMatcher(role="owner"),

    #         # *-try groups can start "try" builds
    #         util.ForceBuildEndpointMatcher(builder="trybuilder", role="*-try"),
    #         # *-mergers groups can start "merge" builds
    #         util.ForceBuildEndpointMatcher(builder="merge", role="*-mergers"),
    #         # *-releasers groups can start "release" builds
    #         util.ForceBuildEndpointMatcher(builder="release", role="*-releasers"),
    #         # if future Buildbot implement new control, we are safe with this last rule
    #         util.AnyControlEndpointMatcher(role="admins")
    #     ],
    #     roleMatchers=[
    #         util.RolesFromUsername(roles=["admins", "admins-try"], usernames=["admin", "root"]),
    #         util.RolesFromUsername(roles=["developers", "integrators"], usernames=["alice", "bob"]),
    #         util.RolesFromUsername(roles=["developers-try"], usernames=["alice"]),
    #     ]
    # )
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

####### Input Validation

# This option configures the validation applied to user inputs of various types.
# This validation is important since these values are often included in command-line
# arguments executed on workers. Allowing arbitrary input from untrusted users may raise
# security concerns.
# http://docs.buildbot.net/latest/manual/configuration/global.html#input-validation

c['validation'] = {
    'branch' : re.compile(r'^[\w.+/~-]*$'),
    'revision' : re.compile(r'^[ \w\.\-\/]*$'),
    'property_name' : re.compile(r'^[\w\.\-\/\~:]*$'),
    'property_value' : re.compile(r'^[\w\.\-\/\~:]*$'),
}
